<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raphael Reitzig - Tinker</title>
    <description>Computer scientist. Teacher. Programmer. LaTeXer.</description>
    <link>http://reitzig.github.io/</link>
    <atom:link href="http://reitzig.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 14 Jan 2018 18:53:54 +0100</pubDate>
    <lastBuildDate>Sun, 14 Jan 2018 18:53:54 +0100</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>Creating Swift Projects in CLion</title>
        <description>
          &lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Swift&lt;/span&gt;  is a modern language with a little teething trouble,
but it is still worth a look. 
If you are like me and you do not want to work on a Mac if you can avoid it, 
your choices of development environments are rather limited at this point. 
Here, I explain how to create a Swift project with
  &lt;a href=&quot;https://www.jetbrains.com/clion/&quot;&gt;Jetbrains’ CLion&lt;/a&gt;,
for which Jetbrains develops a Swift plugin.&lt;/p&gt;


          &lt;p&gt;Read more on &lt;a href=&quot;http://reitzig.github.io/ramblings/2017/creating-swift-projects-in-clion&quot;&gt;reitzig.github.io&lt;/a&gt;.&lt;/p&gt;
        </description>
        <pubDate>Mon, 30 Jan 2017 00:00:00 +0100</pubDate>
        <link>http://reitzig.github.io/ramblings/2017/creating-swift-projects-in-clion</link>
        <guid isPermaLink="true">http://reitzig.github.io/ramblings/2017/creating-swift-projects-in-clion</guid>
        
        <category>Swift</category>
        
        <category>IDE</category>
        
        <category>Tools</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Signing Websites</title>
        <description>
          &lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Today&lt;/span&gt;  I reread some 
  &lt;a href=&quot;http://worldbuilding.stackexchange.com/a/27379/3657&quot;&gt;thoughts of mine&lt;/a&gt;
on how super-computers may engage in battle.
What I wrote got me thinking in another direction:
how can we, even today, be sure that what we read on the internet is what
the alleged author intends us to see? Especially if our connection to the
webserver is not encrypted, man-in-the-middle attacks are a very real possibility.&lt;/p&gt;


          &lt;p&gt;Read more on &lt;a href=&quot;http://reitzig.github.io/ramblings/2015/signing-websites&quot;&gt;reitzig.github.io&lt;/a&gt;.&lt;/p&gt;
        </description>
        <pubDate>Wed, 09 Dec 2015 00:00:00 +0100</pubDate>
        <link>http://reitzig.github.io/ramblings/2015/signing-websites</link>
        <guid isPermaLink="true">http://reitzig.github.io/ramblings/2015/signing-websites</guid>
        
        <category>Website</category>
        
        <category>Security</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Quick Images with TikZ</title>
        <description>
          &lt;p&gt;How do you create high-quality technical images for documents, your website
or posts on Stack Exchange? I have used tools in an ad-hoc manner for a while 
and have become frustrated lately. Once you have used 
  &lt;a href=&quot;http://pgf.sourceforge.net/&quot;&gt;TikZ&lt;/a&gt;
  &lt;label for=&quot;tikz_refs&quot; class=&quot;margin-toggle&quot;&gt; ⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;tikz_refs&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;Check out the awesome &lt;a href=&quot;http://www.texample.net/tikz/examples&quot;&gt;gallery of examples&lt;/a&gt; and the comprehensive &lt;a href=&quot;http://mirror.ctan.org/graphics/pgf/base/doc/generic/pgf/pgfmanual.pdf&quot;&gt;manual&lt;/a&gt;.&lt;/span&gt; 
with &lt;span class=&quot;latex&quot;&gt;L&lt;sup&gt;a&lt;/sup&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt; most other tools feel inferior. 
The only problem is: TikZ is a &lt;span class=&quot;latex&quot;&gt;L&lt;sup&gt;a&lt;/sup&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt; package and can not be used on its own. 
So how to convert TikZ to, say, PNG comfortably?
&lt;!--more--&gt;&lt;/p&gt;


          &lt;p&gt;Read more on &lt;a href=&quot;http://reitzig.github.io/ramblings/2012/quick-images-with-tikz&quot;&gt;reitzig.github.io&lt;/a&gt;.&lt;/p&gt;
        </description>
        <pubDate>Thu, 29 Mar 2012 00:00:00 +0200</pubDate>
        <link>http://reitzig.github.io/ramblings/2012/quick-images-with-tikz</link>
        <guid isPermaLink="true">http://reitzig.github.io/ramblings/2012/quick-images-with-tikz</guid>
        
        <category>LaTeX</category>
        
        <category>TikZ</category>
        
        <category>Scripting</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Lazy Deserialization in Java</title>
        <description>
          &lt;p&gt;While coding away on our master’s project, my team and I faced a problem. In our setting, users provide Java byte code to a client application which instruments it and passes the resulting JAR archive to remote servers via RMI. The servers execute this code in separate processes and feed it inputs values fetched from the client, again via RMI. Now, this can be a problem as users may provide their own implementations for those input values. Both client and separately started processes have, of course, access to these implementations, but servers may not.&lt;/p&gt;


          &lt;p&gt;Read more on &lt;a href=&quot;http://reitzig.github.io/ramblings/2011/lazy-deserialization-in-java&quot;&gt;reitzig.github.io&lt;/a&gt;.&lt;/p&gt;
        </description>
        <pubDate>Thu, 29 Sep 2011 00:00:00 +0200</pubDate>
        <link>http://reitzig.github.io/ramblings/2011/lazy-deserialization-in-java</link>
        <guid isPermaLink="true">http://reitzig.github.io/ramblings/2011/lazy-deserialization-in-java</guid>
        
        <category>Java</category>
        
        <category>Programming</category>
        
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>
